/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    // Apply the common convention plugin for shared build configuration between library and application projects.
    id("com.terheyden.javextras.java-library-conventions")
    // Support for publishing to Maven repositories.
    `maven-publish`
    // For signing uploaded artifacts.
    signing
}

// How to declare extra properties:
// https://docs.gradle.org/current/userguide/writing_build_scripts.html#sec:extra_properties
extra.apply {
    set("githubScmUrl", "scm:git:git://github.com/terheyden/")
    set("githubHttpUrl", "https://github.com/terheyden/")
    set("sonatypeMysteryUrl", "https://oss.sonatype.org/content/repositories/snapshots/")
    set("sonatypePublishUrl", "https://oss.sonatype.org/service/local/staging/deploy/maven2")
}

////////////////////////////////////////
// Library Publishing

// ./gradlew :my-submodule:publish -Psigning.gnupg.passphrase='xyz' --warning-mode all
// ./gradlew publish = publish the lib
// Publish to maven local tasks come automatically:
//     ./gradlew publish<PubName>PublicationToMavenLocal = publish one local
//         (e.g. ./gradlew publishMavenJavaPublicationToMavenLocal)
//     ./gradlew publishToMavenLocal = publish all local
//     (Note that pulishing to maven local ends up in ~/.m2/repository/)
// https://docs.gradle.org/current/userguide/publishing_maven.html
publishing {
    publications {

        // Create a MavenPublication called "mavenJava".
        // We will sign this later in the 'signing' section.
        // https://docs.gradle.org/current/userguide/publishing_maven.html
        create<MavenPublication>("mavenJava") {
            groupId = project.group.toString()
            artifactId = project.name
            version = project.version.toString()
            description = project.description
            from(components["java"])

            // Use resolved versions when exposing 'api' dependencies.
            // (Plays nicely with Maven.)
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }

            val githubScmUrl = project.extra.get("githubScmUrl") as String
            val githubHttpUrl = project.extra.get("githubHttpUrl") as String
            val projectUrl = "${githubHttpUrl}${project.name}"

            // Add metadata to the generated POM:
            pom {
                name.set(project.name)
                groupId = project.group.toString()
                artifactId = project.name
                version = project.version.toString()
                description.set(project.description)
                url.set(projectUrl)

                licenses {
                    license {
                        name.set("The MIT License")
                        url.set("https://opensource.org/licenses/MIT")
                    }
                }

                developers {
                    developer {
                        id.set("terheyden")
                        name.set("Luke Terheyden")
                        email.set("terheyden@gmail.com")
                    }
                }

                scm {
                    connection.set("${githubScmUrl}${project.name}.git")
                    developerConnection.set("${githubScmUrl}#${project.name}.git")
                    url.set(projectUrl)
                }
            }
        }
    }

    repositories {

        val sonatypeUsername = findProperty("sonatypeUsername") as String? ?: "admin"
        val sonatypePwd = findProperty("sonatypePassword") as String? ?: "admin"
        val sonatypeUrl = uri(
            findProperty("sonatypePublishUrl")
                ?: project.extra.get("sonatypePublishUrl") as String)

        maven {
            name = "Sonatype"
            url = sonatypeUrl
            credentials {
                username = sonatypeUsername
                password = sonatypePwd
            }
        }
    }
}

// Only sign if the passphrase is present.
// (Let's us publish to maven local without a passphrase.)
if (project.hasProperty("signing.gnupg.passphrase")) {
    // Sign the 'mavenJava' publication we created above.
    // https://docs.gradle.org/current/userguide/publishing_signing.html
    // https://github.com/gradle-nexus/publish-plugin
    signing {
        useGpgCmd()
        sign(publishing.publications["mavenJava"])
    }
}
